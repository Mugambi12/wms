from flask import Blueprint
from flask_login import login_required
from .forms import *
from .utils import _login_user, _register_user, perform_logout
from .password_reset_utils import _reset_password_request, _reset_password
from ..database.models import PasswordResetToken


auth_bp = Blueprint('auth', __name__, url_prefix='/auth')


@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    """
    Route for user login.

    Returns:
        redirect/render_template: Redirects to the dashboard if login is successful, else renders the login form.
    """
    form = LoginForm()
    return _login_user(form)


@auth_bp.route('/logout')
@login_required
def logout():
    """
    Route for user logout.

    Returns:
        redirect: Redirects to the landing page after successful logout.
    """
    return perform_logout()


@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    """
    Route for user registration.

    Returns:
        redirect/render_template: Redirects to login page if registration is successful, else renders registration form.
    """
    form = RegistrationForm()
    return _register_user(form)


@auth_bp.route('/register/apogen_admin', methods=['GET', 'POST'])
def register_apogen_admin():
    """
    Route for registering an admin user.

    Returns:
        redirect/render_template: Redirects to login page if registration is successful, else renders registration form.
    """
    form = RegistrationForm()
    return _register_user(form, is_admin=True)


@auth_bp.route('/reset_password_request', methods=['GET', 'POST'])
def reset_password_request():
    """
    Handle the reset password request.

    This function is responsible for handling the reset password request from the user.
    It renders the password reset form and calls the _reset_password_request function.

    Returns:
        The response generated by the _reset_password_request function.
    """
    form = PasswordResetForm()
    return _reset_password_request(form)


@auth_bp.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    """
    Reset the user's password using the provided reset token.

    Args:
        token (str): The reset token generated for the user.

    Returns:
        The result of the _reset_password function.

    Raises:
        404: If the reset token is not found in the database.

    """
    reset_token = PasswordResetToken.query.filter_by(token=token).first_or_404()
    form = ResetPasswordForm()
    return _reset_password(form, reset_token, token)
